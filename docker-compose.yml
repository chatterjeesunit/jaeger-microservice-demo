version: '3.8'
networks:
  container-nw:

services:

  database:
    image: 'postgres:13'
    environment:
      POSTGRES_USER: pgadmin
      POSTGRES_PASSWORD: 'pgadmin#123'
      POSTGRES_DB: testdb
    volumes:
      - ~/data/jaeger-pgres-13:/var/lib/postgresql/data
      - ./resources/docker/postgres-init.sh:/docker-entrypoint-initdb.d/postgres-init.sh
    ports:
      - 5432:5432
    networks:
      - container-nw

  jaeger:
    image: 'jaegertracing/all-in-one:1.19'
    networks:
      - container-nw
    ports:
      - 6831:6831/udp   # AGENT - accept jaeger.thrift over compact thrift protocol
      - 5778:5778       # AGENT - serve configs
      - 16686:16686     # QUERY - serve frontend
      - 14268:14268     # COLLECTOR - accept jaeger.thrift directly from clients

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - 8080
    environment:
      OPENTRACING_JAEGER_SERVICE-NAME: Config Service
      OPENTRACING_JAEGER_ENABLED: 'true'
      OPENTRACING_JAEGER_UDP-SENDER_HOST: jaeger
      OPENTRACING_JAEGER_UDP-SENDER_PORT: 6831
      OPENTRACING.JAEGER.LOG-SPANS: 'false'
    networks:
      - container-nw

  customer-service:
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    depends_on:
      - database
      - config-server
    command: sh -c " dockerize -timeout 60s -wait-retry-interval 5s
        -wait tcp://database:5432
        -wait http://config-server:8080/actuator/health
        java -jar /app.jar"
    restart: unless-stopped
    ports:
      - 8080
    environment:
      SPRING_CLOUD_CONFIG_URI: 'http://config-server:8080'
      OPENTRACING_JAEGER_SERVICE-NAME: Customer Service
      OPENTRACING_JAEGER_ENABLED: 'true'
      OPENTRACING_JAEGER_UDP-SENDER_HOST: jaeger
      OPENTRACING_JAEGER_UDP-SENDER_PORT: 6831
      OPENTRACING.JAEGER.LOG-SPANS: 'false'
    networks:
      - container-nw

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    depends_on:
      - database
      - config-server
    command: sh -c " dockerize -timeout 60s -wait-retry-interval 5s
      -wait tcp://database:5432
      -wait http://config-server:8080/actuator/health
      java -jar /app.jar"
    restart: unless-stopped
    ports:
      - 8080
    environment:
      SPRING_CLOUD_CONFIG_URI: 'http://config-server:8080'
      OPENTRACING_JAEGER_SERVICE-NAME: Product Service
      OPENTRACING_JAEGER_ENABLED: 'true'
      OPENTRACING_JAEGER_UDP-SENDER_HOST: jaeger
      OPENTRACING_JAEGER_UDP-SENDER_PORT: 6831
      OPENTRACING.JAEGER.LOG-SPANS: 'false'
    networks:
      - container-nw

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    depends_on:
      - database
      - config-server
    command: sh -c " dockerize -timeout 60s -wait-retry-interval 5s
      -wait tcp://database:5432
      -wait http://config-server:8080/actuator/health
      java -jar /app.jar"
    restart: unless-stopped
    ports:
      - 8080
    environment:
      SPRING_CLOUD_CONFIG_URI: 'http://config-server:8080'
      OPENTRACING_JAEGER_SERVICE-NAME: Order Service
      OPENTRACING_JAEGER_ENABLED: 'true'
      OPENTRACING_JAEGER_UDP-SENDER_HOST: jaeger
      OPENTRACING_JAEGER_UDP-SENDER_PORT: 6831
      OPENTRACING.JAEGER.LOG-SPANS: 'false'
    networks:
      - container-nw

  bff-service:
    build:
      context: ./bff-service
      dockerfile: Dockerfile
    depends_on:
      - config-server
      - customer-service
      - product-service
      - order-service
    command: sh -c " dockerize -timeout 60s -wait-retry-interval 5s
      -wait http://config-server:8080/actuator/health
      -wait http://customer-service:8080/actuator/health
      -wait http://product-service:8080/actuator/health
      -wait http://order-service:8080/actuator/health
      java -jar /app.jar"
    restart: unless-stopped
    ports:
      - 8080
    environment:
      SPRING_CLOUD_CONFIG_URI: 'http://config-server:8080'
      OPENTRACING_JAEGER_SERVICE-NAME: BFF Service
      OPENTRACING_JAEGER_ENABLED: 'true'
      OPENTRACING_JAEGER_UDP-SENDER_HOST: jaeger
      OPENTRACING_JAEGER_UDP-SENDER_PORT: 6831
      OPENTRACING.JAEGER.LOG-SPANS: 'false'
    networks:
      - container-nw
    labels:
      - traefik.enable=true
      - traefik.http.routers.bff-service.rule=Host(`dev-sandbox`)
      - traefik.http.routers.bff-service.entrypoints=http
      - traefik.http.services.bff-service.loadbalancer.server.port=8080

  load-balancer:
    image: 'traefik:v2.3'
    command: |
      --providers.docker=true
      --providers.docker.exposedbydefault=false
      --entryPoints.http.address=":80"
      --accesslog
      --log.level=INFO
      --api=true
      --api.insecure=true
      --api.dashboard=true
      --tracing.jaeger=true
      --tracing.jaeger.localAgentHostPort=jaeger:6831
    ports:
      - '80:80'
      - '8080:8080'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    networks:
      - container-nw
    depends_on:
      - bff-service
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik_http.rule=Host(`dev-sandbox`)
      - traefik.http.routers.traefik_http.service=api@internal
      - traefik.http.routers.traefik_http.entrypoints=http