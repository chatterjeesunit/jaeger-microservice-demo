version: '3.8'
networks:
  internal-nw:
    internal: true
  external-nw:

services:

  database:
    image: 'postgres:13'
    environment:
      POSTGRES_USER: pgadmin
      POSTGRES_PASSWORD: 'pgadmin#123'
      POSTGRES_DB: testdb
    volumes:
      - ~/data/jaeger-pgres-13:/var/lib/postgresql/data
      - ./resources/docker/postgres-init.sh:/docker-entrypoint-initdb.d/postgres-init.sh
    ports:
      - 5432:5432
    networks:
      internal-nw:
      external-nw:

  jaeger:
    image: 'jaegertracing/all-in-one:1.19'
    networks:
      internal-nw:
      external-nw:
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    ports:
      - 5775:5775/udp   # AGENT - accept zipkin.thrift over compact thrift protocol (deprecated)
      - 6831:6831/udp   # AGENT - accept jaeger.thrift over compact thrift protocol
      - 6832:6832/udp   # AGENT - accept jaeger.thrift over binary thrift protocol
      - 5778:5778       # AGENT - serve configs
      - 16686:16686     # QUERY - serve frontend
      - 14268:14268     # COLLECTOR - accept jaeger.thrift directly from clients
      - 14250:14250     # COLLECTOR - accept model.proto
      - 9411:9411       # COLLECTOR - Zipkin compatible endpoint

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - jaeger
    ports:
      - '9000:8080'
    environment:
      OPENTRACING_JAEGER_SERVICE-NAME: Config Service
      OPENTRACING_JAEGER_ENABLED: 'true'
      OPENTRACING_JAEGER_UDP-SENDER_HOST: jaeger
      OPENTRACING_JAEGER_UDP-SENDER_PORT: 6831
    networks:
      internal-nw:
      external-nw:
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5


  customer-service:
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    depends_on:
      - database
      - config-server
      - jaeger
    restart: always
    ports:
      - 9001:8080
    environment:
      SPRING_CLOUD_CONFIG_URI: 'http://config-server:8080'
      OPENTRACING_JAEGER_SERVICE-NAME: Customer Service
      OPENTRACING_JAEGER_ENABLED: 'true'
      OPENTRACING_JAEGER_UDP-SENDER_HOST: jaeger
      OPENTRACING_JAEGER_UDP-SENDER_PORT: 6831
    networks:
      internal-nw:
      external-nw:


  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    depends_on:
      - database
      - config-server
      - jaeger
    restart: always
    ports:
      - 9002:8080
    environment:
      SPRING_CLOUD_CONFIG_URI: 'http://config-server:8080'
      OPENTRACING_JAEGER_SERVICE-NAME: Product Service
      OPENTRACING_JAEGER_ENABLED: 'true'
      OPENTRACING_JAEGER_UDP-SENDER_HOST: jaeger
      OPENTRACING_JAEGER_UDP-SENDER_PORT: 6831
    networks:
      internal-nw:
      external-nw:

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    depends_on:
      - database
      - config-server
      - jaeger
    restart: always
    ports:
      - 9003:8080
    environment:
      SPRING_CLOUD_CONFIG_URI: 'http://config-server:8080'
      OPENTRACING_JAEGER_SERVICE-NAME: Order Service
      OPENTRACING_JAEGER_ENABLED: 'true'
      OPENTRACING_JAEGER_UDP-SENDER_HOST: jaeger
      OPENTRACING_JAEGER_UDP-SENDER_PORT: 6831
    networks:
      internal-nw:
      external-nw: